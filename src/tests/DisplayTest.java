package tests;

import io.Listener;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.image.BufferStrategy;
import java.util.ArrayList;

import graphics.DisplayMonitor;

import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 * Tests the functionality of the basic display functions of the Engine library.
 * Running this test creates a full screen window and, if possible, adjusts the display to the
 *  optimal size.
 * The size of the screen is displayed in the window and, to ensure that the window initialized
 *  fully, dragging the mouse on the window creates red dots in a paintbrush-like style.
 */
public class DisplayTest implements Runnable
{
    private ArrayList<Point> points;

    private JFrame frame;

    /**
     * Runs a test of the display.
     *
     * @param args - command-line arguments, ignored
     */
    public static void main(String[] args)
    {
        new DisplayTest().test();
    }

    /**
     * Runs a test of the display by creating a full-screen window using the {@link DisplayMonitor}
     *  functions, listening to select user input with the {@link Listener}, and running a draw
     *  loop.
     */
    public void test()
    {
        frame = DisplayMonitor.createFrame("Display Test", new Panel());
        points = new ArrayList<Point>();

        Listener.requestNotification(this, "exit", Listener.TYPE_KEY_RELEASED, KeyEvent.VK_ESCAPE);
        Listener.requestNotification(this, "mouse", Listener.TYPE_MOUSE_PRESSED);
        Listener.requestNotification(this, "mouse", Listener.TYPE_MOUSE_DRAGGED);
        Listener.requestNotification(this, "mouse", Listener.TYPE_MOUSE_RELEASED);

        new Thread(this).start();
    }

    /**
     * Runs a draw loop, continually drawing to the full-screen window using a double buffer.
     *
     * @see Runnable#run()
     */
    public void run()
    {
        while (true)
        {
            BufferStrategy strategy = frame.getBufferStrategy();
            Graphics2D g = (Graphics2D)strategy.getDrawGraphics();
            draw(g);
            g.dispose();

            strategy.show();
            Toolkit.getDefaultToolkit().sync();

            try
            {
                Thread.sleep(20);
            }
            catch (InterruptedException ex)
            {
                ex.printStackTrace();
            }
        }
    }

    /**
     * Exits the display test.
     * This method is invoked by the {@link Listener} when the user presses the escape key.
     */
    public void exit()
    {
        System.exit(0);
    }

    /**
     * Places a visible point on the screen at the location of the given mouse event.
     * This method is invoked by the {@link Listener} when the user presses, drags, or releases
     *  the mouse.
     *
     * @param e - the {@link MouseEvent} generated by the user
     */
    public void mouse(MouseEvent e)
    {
        points.add(new Point(e.getX(), e.getY()));
    }

    /**
     * Draws the contents of the full-screen window.
     * Informational and diagnostic information is shown at the top-left of the screen, and dots
     *  "drawn" by the user with the mouse are shown in red.
     *
     * @param g - the graphics context
     */
    public void draw(Graphics2D g)
    {
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        g.setColor(Color.black);
        g.fillRect(0, 0, DisplayMonitor.screen.width, DisplayMonitor.screen.height);

        g.setColor(Color.red);
        for (int i = 0; i < points.size(); i++)
        {
            g.fillOval(points.get(i).x - 3, points.get(i).y - 3, 6, 6);
        }

        g.setColor(Color.white);
        g.drawString("Display Test", 25, 30);
        g.drawString("Screen size: " + DisplayMonitor.screen.width + ", " +
                DisplayMonitor.screen.height, 25, 50);
        g.drawString("Display chang supported: " + DisplayMonitor.isDisplayChangeSupported(),
                25, 70);
        g.drawString("Press [ESC] to exit.", 25, 90);
    }

    /**
     * Allows for smoother interaction with the operating system.
     */
    private class Panel extends JPanel
    {
        private static final long serialVersionUID = 1L;

        public void paintComponent(Graphics context)
        {
            draw((Graphics2D)context);
        }
    }
}
